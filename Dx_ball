/*
 * File: Breakout.java
 * -------------------
 * Name:
 * Section Leader:
 * 
 * This file will eventually implement the game of Breakout.
 */

import acm.graphics.*;
import acm.program.*;
import acm.util.*;

import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class Breakout extends GraphicsProgram {

	/** Width and height of application window in pixels */
	public static final int APPLICATION_WIDTH = 400;
	public static final int APPLICATION_HEIGHT = 600;

	/** Dimensions of game board (usually the same) */
	private static final int WIDTH = APPLICATION_WIDTH;
	private static final int HEIGHT = APPLICATION_HEIGHT;

	/** Dimensions of the paddle */
	private static final int PADDLE_WIDTH = 60;
	private static final int PADDLE_HEIGHT = 10;

	/** Offset of the paddle up from the bottom */
	private static final int PADDLE_Y_OFFSET = 30;

	/** Number of bricks per row */
	private static final int NBRICKS_PER_ROW = 10;

	/** Number of rows of bricks */
	private static final int NBRICK_ROWS = 10;

	/** Separation between bricks */
	private static final int BRICK_SEP = 4;

	/** Width of a brick */
	private static final int BRICK_WIDTH =
	  (WIDTH - (NBRICKS_PER_ROW - 1) * BRICK_SEP) / NBRICKS_PER_ROW;

	/** Height of a brick */
	private static final int BRICK_HEIGHT = 8;

	/** Radius of the ball in pixels */
	private static final int BALL_RADIUS = 10;

	/** Offset of the top brick row from the top */
	private static final int BRICK_Y_OFFSET = 70;

	/** Number of turns */
	private static final int NTURNS = 3;

	/* Method: init() */
	/** Sets up the Breakout program. */
	
	public void init() {

		/* You fill this in, along with any subsidiary methods */
	  
		line = new GLine(APPLICATION_WIDTH,APPLICATION_HEIGHT,APPLICATION_WIDTH,0);
		
		add(line);
		
		label = new GLabel("points = "+points,10,10);
		
		add(label);
		
		setBackground(Color.BLUE);
	
		setUpBrick();
		
		createPaddle();
		
		createBall();
		
	}
	
	public void setUpBrick()
	{
		int dis_x=0;
		int dis_y=BRICK_Y_OFFSET;
		for(int j=0;j<NBRICK_ROWS;j++)
		{
		  for(int i=0;i<NBRICKS_PER_ROW;i++)
		  {
			rect = new GRect(dis_x,dis_y,BRICK_WIDTH,BRICK_HEIGHT);
			rect.setFilled(true);
			if(j==0 || j==1)
			    rect.setFillColor(Color.RED);
			if(j==2 || j==3)
				rect.setFillColor(Color.ORANGE);
			if(j==4 || j==5)
				rect.setFillColor(Color.YELLOW);
			if(j==6 || j==7)
				rect.setFillColor(Color.GREEN);
			if(j==8 || j==9)
				rect.setFillColor(Color.CYAN);
			add(rect);
			dis_x=dis_x+BRICK_WIDTH+BRICK_SEP;
		  }
		 dis_y=dis_y+BRICK_HEIGHT+BRICK_SEP;
		 dis_x=0;
		}
	  }
	
	public void createPaddle()
	{
		paddle = new GRect(0,APPLICATION_HEIGHT-PADDLE_Y_OFFSET,PADDLE_WIDTH,PADDLE_HEIGHT);
		paddle.setFilled(true);
		//paddle.setFillColor(Color.BLUE);
		add(paddle);
		
	}
	public void createBall()
	{
		ball = new GOval(APPLICATION_WIDTH/2-BALL_RADIUS,APPLICATION_HEIGHT/2-BALL_RADIUS,2*BALL_RADIUS,2*BALL_RADIUS);
		ball.setFilled(true);
		add(ball);
	}
	
	/* Method: run() */
	/** Runs the Breakout program. */
	public void run() {
		/* You fill this in, along with any subsidiary methods */
		waitForClick();
		
		movePaddle();
		
		ballMotion();
		
		
	}
	public void ballMotion()
	{
		vx = rgen.nextDouble(1.0, 3.0); 
		if (rgen.nextBoolean(0.5))
				vx = -vx; 
		while(true)
		{
			ball.move(vx,vy);
			ball.pause(15);
            if(ball.getX()<=0)
            	vx=-vx;
            if(ball.getY()<=0)
            	vy=-vy;
           // if(ball.getX()>=APPLICATION_WIDTH)
            //	vx=-vx;
            if(ball.getY()+2*BALL_RADIUS>paddle.getY()+PADDLE_HEIGHT)
            	{GObject label = new GLabel("YOU LOSE-TRY AGAIN",100,300);
            	add(label);
            	}
			GObject collider=getCollidingObject();
			if(collider==paddle)
			{
				vy=-vy;
			}
			if(collider==line)
			{
				vx=-vx;
			}
			if(collider!=null && collider!=paddle && collider!=line)
				{
				vy=-vy;
				remove(collider);
				points=points+5;
				label.setLabel("points = "+points);
				}
			
		}
	}
	private GObject getCollidingObject()
	{
		GObject l;
		l=getElementAt(ball.getX(),ball.getY());
		if(l==null)
			l=getElementAt(ball.getX()+2*BALL_RADIUS,ball.getY());
		if(l==null)
			l=getElementAt(ball.getX(),ball.getY()+2*BALL_RADIUS);
		if(l==null)
			l=getElementAt(ball.getX()+2*BALL_RADIUS,ball.getY()+2*BALL_RADIUS);
		return l;
	}
	public void movePaddle()
	{
		addMouseListeners();
	}
	public void mouseMoved(MouseEvent e)
	{
		lastx=e.getX();
		if(lastx+PADDLE_WIDTH<APPLICATION_WIDTH)
		paddle.move(lastx-paddle.getX(),0);
	}
	private GLabel label;
	private int points=0;
	private GLine line;
	private GRect rect;
	private GRect paddle;
	private GOval ball;
	private double vx, vy=3.0;
	private double lastx;
	private RandomGenerator rgen = RandomGenerator.getInstance();
 }
